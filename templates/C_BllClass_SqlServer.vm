using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
using System.IO;
using System.Data;
using System.Web;
using System.ComponentModel;


[System.ComponentModel.DataObject]
public partial class ${table}Bll
{
 
  [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)] 
  public static List< ${table} > Get${table}()
    {
         List< ${table} > lista${table}= new  List< ${table} >();
        dbClass db=new dbClass(ctes.conStringAdoGeneral);
        
        try
        {
            StringBuilder sb= new StringBuilder();
           
            sb.Append(" select ");
            sb.Append("${table.getListOfFields(",")}");
            sb.Append(" from ${table}");
            System.Data.DataSet ds = db.sqlDataset(sb.ToString());

             foreach (DataRow row in ds.Tables[0].Rows)
            {
                ${table} new${table}= new ${table}();                
                #foreach( $field in $table.GetArrayOfFields )
				#if (! $field.isKey)
				#if ($field.type.toString() == "_integer")
					new${table}.${field} = sf.entero(row["${field}"]);
				#end  
				#if ($field.type.toString() == "_string")
					 new${table}.${field} = sf.cadena(row["${field}"]);
				#end  
				#if ($field.type.toString() == "_date")
					new${table}.${field} = sf.fecha(row["${field}"].ToString());
				#end  
				#if ($field.type.toString() == "_boolean")
					new${table}.${field} = sf.Bool(row["${field}"]);					
				#end 		
				#end 
				#end               

                lista${table}.Add(new${table} );
                new${table} =null;
            }
        }
        catch (System.Exception ex)
        {}
        finally
        {
         db.Dispose();
        } 

        //authors.Sort(New AuthorComparer(sortExpression))
        return lista${table};
   }

 
[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
 public static string Insert(${table} obj${table})
    {            
        System.Text.StringBuilder sqlt = new System.Text.StringBuilder();
        string retorno = "";
        dbClass db = new dbClass(ctes.conStringAdoGeneral);
        SqlDataReader reg;
        try
        {
        sqlt.Append( " insert into ${table} (${table.getListOfFieldsWithoutKeys("")})"); 
        sqlt.Append( " ) values (");
            #set ($count = 0)
			#foreach( $field in $table.GetArrayOfFields )
			#if (! $field.isKey)
			#if ($field.type.toString() == "_integer")
				sqlt.Append( sf.mySql(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count() -  $count  != 1) , #end") ;
			#end  
			#if ($field.type.toString() == "_string")
				sqlt.Append( sf.mySql(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count()-  $count  != 1) , #end") ;
			#end  
			#if ($field.type.toString() == "_date")
				sqlt.Append( sf.mySql(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count()-  $count  != 1) , #end") ;
			#end  
			#if ($field.type.toString() == "_boolean")
				sqlt.Append( sf.mySql(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count()-  $count  != 1) , #end") ;
			#end 		
			#end 
			#set ($count = $count + 1 ) 
			#end    
			
			sqlt.Append(" )");

            db.ejecutar(sqlt.ToString());
            reg = db.sql("select @@identity as id from ${table}");
            if (reg.Read())
                {
                  retorno = sf.cadena(reg["id"].ToString());
                }
                reg.Close();
            }
                 
            catch (Exception ex)
            {
                // Argument is optional, no "When" keyword 
            }
            finally
            {
                db.Dispose();
              
            }
            return retorno;
       }

	
	public static void Delete(${table} obj${table})
    {
        string sqlt;
        dbClass db = new dbClass(ctes.conStringAdoGeneral);
        try { 
        sqlt = " delete from ${table} ";
        sqlt += " where 1!=0";  
        
         #foreach( $field in $table.GetArrayOfFields )
		#if ($field.isKey)
		#if ($field.type.toString() == "_string")
			sqlt += " and ${field}='" + sf.cadena(obj${table}.${field})';
		#else
			sqlt += " and ${field}=" + sf.cadena(obj${table}.${field});
		#end  
		#end 
		#end 
        
       		
		 
           db.ejecutar(sqlt);

           }
           catch (Exception ex)
           {
               // Argument is optional, no "When" keyword 
           }
           finally
           {
               db.Dispose();

           }
    }
	
	
	[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
	public static bool UpdateBll(${table} obj${table})
		{
            SqlDataReader reg;
            System.Text.StringBuilder sqlt = new System.Text.StringBuilder();
            dbClass db = new dbClass(ctes.conStringAdoGeneral);
            try
            {
            sqlt.Append(" update ${table} set");
            
            #set ($count = 0)
			#foreach( $field in $table.GetArrayOfFields )
			#if (! $field.isKey)
			#if ($field.type.toString() == "_integer")
				sqlt.Append(" ${field}=" + sf.cadena(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count() -  $count  != 1) , #end") ;
			#end  
			#if ($field.type.toString() == "_string")
				sqlt.Append(" ${field}='" + sf.cadena(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count()-  $count  != 1) , #end") ;
			#end  
			#if ($field.type.toString() == "_date")
				sqlt.Append(" ${field}='" + sf.fechaIso(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count()-  $count  != 1) , #end") ;
			#end  
			#if ($field.type.toString() == "_boolean")
				sqlt.Append(" ${field}=" + sf.Bool(obj${table}.${field}) + "#if ($table.GetArrayOfFields.count()-  $count  != 1) , #end") ;
			#end 		
			#end 
			#set ($count = $count + 1 ) 
			#end 
             
		          
		sqlt.Append(" where  ${table.getKey}=" + sf.cadena(obj${table.getKey}));        
		reg = db.sql(sqlt.ToString());
             return (reg!=null);
              }   
            catch (Exception ex)
            {
                // Argument is optional, no "When" keyword 
            }
            finally
            {
                db.Dispose();              
            }
             return true; 
       }
 
	
 
}