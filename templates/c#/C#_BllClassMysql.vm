#* 
	comments: 
	crea una extension para la clase para c# para la tabla  ${table}...
 basicamente para su uso como objectDataSource ...

	Author: Luis Molina
*#   
 
<nameFile>${table}bll</nameFile>
<extensionFile>cs</extensionFile>
<languageGenerated>c_sharp</languageGenerated>
<description>description</description>
<targetDirectory></targetDirectory>
<appliesToAllTables>true</appliesToAllTables>
 
using System;
using System.Collections.Generic;

using System.Text;
using System.IO;
using System.Data;

public partial class ${table}
{
 
      [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)] 
  public static List< ${table} > Get${table}()
    {
         List< ${table} > lista${table}= new  List< ${table} >();
        dbClass db=new dbClass(ctes.conStringAdoGeneral);
        
        try
        {
            StringBuilder sb= new StringBuilder();
           
            sb.Append(" select ");
            sb.Append("${table.getListOfFields(",")}");
            sb.Append(" from ${table}");
            System.Data.DataSet ds = db.sqlDataset(sb.ToString());

             foreach (DataRow row in ds.Tables[0].Rows)
            {
                ${table} new${table}= new ${table}();
                #set ($count = 0)		
				#foreach( $field in $table.GetArrayOfFields ) 
				#if (!$field.isKey())
					 
					 
							  #if ($field.type.toString() == "_integer")
			 					 new${table}.${field} = sf.entero(row["${field}"]);
								 #end
							  #if ($field.type.toString() == "_string")
								 new${table}.${field} = sf.cadena(row["${field}"]);
								 #end
							  #if ($field.type.toString() == "_date")
								 new${table}.${field} = sf.fecha(row["${field}"]);
								 #end
							  #if ($field.type.toString() == "_boolean")
								 new${table}.${field} = sf.bool(row["${field}"]);
								 #end
						 
				#end
			 #set ($count = $count + 1 ) 
			#end	 
				
                
               

                lista${table}.Add(new${table} );
                new${table} =null;
            }
        }
        catch (System.Exception ex)
        {}
        finally
        {
         db.Dispose();
        } 

        //authors.Sort(New AuthorComparer(sortExpression))
        return lista${table};
   }

 
    [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
    public static  ${table} Get${table}By${table.getKey()} (int ${table.getKey()} )
    {   
       ${table} new${table}= new ${table}();
        dbClass db=new  dbClass(ctes.conStringAdoGeneral);
        MySql.Data.MySqlClient.MySqlDataReader reg;
        StringBuilder sql=new StringBuilder();
        try
        {
            sql.Append(" select "); 
            sql.Append(" ${table.getListOfFieldsWithoutKeys("")} ");
            
            sql.Append(" from ${table} ");
            sql.Append(" where  ${table.getKey()}=");
            sql.Append(${table.getKey()});

            reg = db.sql(sql.ToString());
            if (reg.Read())
            {
               
			    #set ($count = 0)		
				#foreach( $field in $table.GetArrayOfFields ) 
				#if (!$field.isKey())
					 
					 
							  #if ($field.type.toString() == "_integer")
			 					 new${table}.${field} = sf.entero(reg["${field}"]);
								 #end
							  #if ($field.type.toString() == "_string")
								 new${table}.${field} = sf.cadena(reg["${field}"]);
								 #end
							  #if ($field.type.toString() == "_date")
								 new${table}.${field} = sf.fecha(reg["${field}"]);
								 #end
							  #if ($field.type.toString() == "_boolean")
								 new${table}.${field} = sf.bool(reg["${field}"]);
								 #end
							  
				#end
			 #set ($count = $count + 1 ) 
			#end	 
			
              }
        }
        catch (System.Exception ex)
        {}
        finally
        {
            db.Dispose();
            }
         
        return new${table};
        //authors.Sort(New AuthorComparer(sortExpression))

    }
     

    [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
    public static void UpdateBll ( ${table.getListOfParameters(",")})
        {
        try
        {
            ${table} new${table} = new ${table}();
            new${table} = ${table}.get${table}(${table.getKey()});

            ${table}.Update (new${table});


        }
        catch (System.Exception ex)
        {
        
        }
        
        
    }


[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
public static bool UpdateBll(${table} obj${table})
		{
            MySql.Data.MySqlClient.MySqlDataReader reg;
            System.Text.StringBuilder sqlt = new System.Text.StringBuilder();
            dbClass db = new dbClass(ctes.conStringAdoGeneral);
            try
            {
            sqlt.Append(" update ${table} set");
			#set ($count = 0)		
			#foreach( $field in $table.GetArrayOfFields )
		 	 
			 
				  #if ($field.type.toString() == "_integer")
						sqlt.Append(" ${field}=" + sf.cadena(obj${table}.${field})+ "', ") ;
					 #end
				  #if ($field.type.toString() == "_string")
					sqlt.Append(" ${field}='" + sf.cadena(obj${table}.${field})+ "', "); 
					 #end
				  #if ($field.type.toString() == "_date")
					  sqlt.Append(" ${field}='" + sf.fechaIso(obj${table}.${field}) + "', " );
					 #end
				  #if ($field.type.toString() == "_boolean")
					 sqlt.Append(" ${field}=" + sf.Bool(obj${table}.${field}) + "', ");
					 #end
				   		 
		 #set ($count = $count + 1 ) 
		#end
			sqlt.Remove(sqlt.Length - 1, 1);            
             reg = db.sql(sqlt.ToString());
             return (reg!=null);
              }   
            catch (Exception ex)
            {
                // Argument is optional, no "When" keyword 
            }
            finally
            {
                db.Dispose();              
            }
             return true;
       }


[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
 public static string InsertBll(${table} obj${table})
    {
            
        System.Text.StringBuilder sqlt = new System.Text.StringBuilder();
        string retorno = "";
        dbClass db = new dbClass(ctes.conStringAdoGeneral);
        MySql.Data.MySqlClient.MySqlDataReader reg;
        try
        {
        sqlt.Append( " insert into ${table} (${table.getListOfFieldsWithoutKeys(",")})"); 
        sqlt.Append( " ) values (");
			#set ($count = 0)	
			#foreach( $field in $table.GetArrayOfFields ) 
				#if (!$field.isKey())
					 
					 
							  #if ($field.type.toString() == "_integer")
			 					 sqlt.Append( sf.mySql(obj${table}.${field}) + " ,") ;
								 #end
							  #if ($field.type.toString() == "_string")
								 sqlt.Append( sf.mySql(obj${table}.${field}) + " ,") ;
								 #end
							  #if ($field.type.toString() == "_date")
								 sqlt.Append( sf.mySql(obj${table}.${field}) + " , ")  ;
								 #end
							  #if ($field.type.toString() == "_boolean")
								 sqlt.Append( sf.mySql(obj${table}.${field}))  + " ,";
								 #end
							   
				#end
			 #set ($count = $count + 1 ) 
			#end	 
			sqlt.Remove(sqlt.Length - 1, 1);
            sqlt.Append(" )");

            db.ejecutar(sqlt.ToString());
            reg = db.sql("select @@identity as id from ${table}");
            if (reg.Read())
                {
                  retorno = sf.cadena(reg["id"].ToString());
                }
                reg.Close();
            }
                 
            catch (Exception ex)
            {
                // Argument is optional, no "When" keyword 
            }
            finally
            {
                db.Dispose();
              
            }
            return retorno;
       }


	// returns number of registers in the table... (for pagination)
	 public static int getCount ()
		{
           
            MySqlDataReader reg;
            string sqlt;
            int retorno=0;
           
            dbClass db = new dbClass(ctes.conStringAdoGeneral);
            try
            {
            sqlt = "select count(*) as cont from ${table}";
                     
            reg = db.sql(sqlt);
            if (reg.Read()) 
			{
				retorno=sf.entero(reg["cont"].ToString());
			}
            else retorno=0;
               
            reg.Close();
            }
            catch (Exception ex)
            {
                // Argument is optional, no "When" keyword 
            }
            finally
            {
                db.Dispose();
              
            }
            return  retorno;
       } // count
 
 
 // devuelve una lista de ${table} para paginacion...
 
 		public static List<${table}> getPage(int num, int tamPag)
		{
		    List< ${table} > lista${table} = new List< ${table} >();
            MySqlDataReader reg;
            string sqlt;
            dbClass db = new dbClass(ctes.conStringAdoGeneral);
            try
            {
            sqlt = "select ${table.getListOfFields(",")} from ${table} limit " + sf.cadena(num*tamPag) + "," + sf.cadena(tamPag);
            reg = db.sql(sqlt);
            while (reg.Read())
                {
                ${table} pp = new ${table}();
#foreach( $field in $table.GetArrayOfFields ) 	 
		  #if ($field.type.toString() == "_integer")
		     pp.${field} = sf.entero(reg["${field}"].ToString());
		     #end 
		  #if ($field.type.toString() == "_string")
		     pp.${field} = sf.cadena(reg["${field}"].ToString());
		     #end 
		  #if ($field.type.toString() == "_date")
		     pp.${field} = sf.fecha(reg["${field}"].ToString());
		     #end 
		  #if ($field.type.toString() == "_boolean")
		     pp.${field} = sf.Bool(reg["${field}"].ToString());
		     #end 
#end 
               lista${table}.Add(pp);
               }
            reg.Close();
            }
            catch (Exception ex)
            {
                 
            }
            finally
            {
                db.Dispose();
              
            }
            return lista${table};
       }		// getPage
 



 
}






 
