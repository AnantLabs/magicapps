//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3603
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

// para la serializacion
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Runtime.Serialization;

// para arraylist
using System.Collections;


[Serializable()]

public class project : ISerializable
{


    public enum databaseType
    {
        mySql,
        SqlServer,
        sqlServer2008,
        sqlLite

    }

    #region ["Variables"]


    private int _idProjects;
    private string _name;
    private string _description;
    private string _nameSpace;
   
    
    private databaseType _dbDataType;
    private string _database;
    private string _user;
    private string _instance;
    private string _password;
    private string _host;
    private string _port;

    // variables used for storing conf..
    private string _targetDirectory;
    private string _projectTemplatesDirectory;
    private string _projectTemplatesDirectorySmall;
    private string _targetLanguage;

    private String _templateSelected;
    private String _templateSelectedFullUri;

    private table _actualTable;
    private String _tableSelected;
   

    // This attribute enables the ArrayList to be serialized:
    [System.Xml.Serialization.XmlArray("Tables")]
    // Explicitly tell the serializer to expect the Item class
    // so it can be properly written to XML from the collection:
    [System.Xml.Serialization.XmlArrayItem("Table", typeof(table))]
    public ArrayList tables = new ArrayList();


    // This attribute enables the ArrayList to be serialized:
    [System.Xml.Serialization.XmlArray("Relations")]
    // Explicitly tell the serializer to expect the Item class
    // so it can be properly written to XML from the collection:
    [System.Xml.Serialization.XmlArrayItem("Relation", typeof(relation))]
    public ArrayList relations = new ArrayList();


    #endregion


    #region ["Propiedades"]


    public int idProjects
    {
        get { return _idProjects; }
        set { _idProjects = value; }
    }
    public string name
    {
        get { return _name; }
        set { _name = value; }
    }
    public string description
    {
        get { return _description; }
        set { _description = value; }
    }

    public string nameSpace
    {
        get { return _nameSpace; }
        set { _nameSpace = value; }
    }
  
    
    
    public databaseType dbDataType
    {
        get { return _dbDataType; }
        set { _dbDataType = value; }
    }
   
    public string targetDirectory
    {
        get { return _targetDirectory; }
        set { _targetDirectory = value; }
    }
    
    public string database
    {
        get { return _database; }
        set { _database = value; }
    }
    public string user
    {
        get { return _user; }
        set { _user = value; }
    }
    public string instance
    {
        get { return _instance; }
        set { _instance = value; }
    }
    public string password
    {
        get { return _password; }
        set { _password = value; }
    }
    public string host
    {
        get { return _host; }
        set { _host = value; }
    }
    public string port
    {
        get { return _port; }
        set { _port = value; }
    }
    public string projectTemplatesDirectory
    {
        get { return _projectTemplatesDirectory; }
        set { _projectTemplatesDirectory = value; }
    }

    public string projectTemplatesDirectorySmall
    {
        get { return _projectTemplatesDirectorySmall; }
        set { _projectTemplatesDirectorySmall = value; }
    }


    public string targetLanguage
    {
        get { return _targetLanguage; }
        set { _targetLanguage = value; }
    }

    public string templateSelectedFullUri
    {
        get { return _templateSelectedFullUri; }
        set { _templateSelectedFullUri = value; }
    }

    public string templateSelected
    {
        get { return _templateSelected; }
        set { _templateSelected = value; }
    }


    public table actualTable
    {
        get { return _actualTable; }
        set { _actualTable = value; }
    }

    public string tableSelected
    {
        get { return _tableSelected; }
        set { _tableSelected = value; }
    }

    #endregion





    public project()
    {

        tables = new ArrayList();



    }


    public void saveProject(string filename)
    {
        try
        {
  // Create an instance of the XmlSerializer class;
        // specify the type of object to serialize.
        XmlSerializer serializer = new XmlSerializer(typeof(project));
        TextWriter writer = new StreamWriter(filename);
        project po = new project();
        po = this;

        // Serialize and close the TextWriter.
        serializer.Serialize(writer, po);
        writer.Close();
        }
        catch (Exception ex)
        {
            
            throw;
        }

      


    }

    public static project loadProject(string filename)
    {
        // Declare an object variable of the type to be deserialized.
        project po;
        try
        {

            // Create an instance of the XmlSerializer class;
            // specify the type of object to be deserialized.
            XmlSerializer serializer = new XmlSerializer(typeof(project));

            // A FileStream is needed to read the XML document.
            FileStream fs = new FileStream(filename, FileMode.Open);

            /* Use the Deserialize method to restore the object's state with data from the XML document. */
            po = (project)serializer.Deserialize(fs);
            fs.Close();
            return po;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }

        finally
        {
            
        }






    }

    //Serialization function.

    public void GetObjectData(SerializationInfo info, StreamingContext ctxt)
    {

    }

    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList GetTables
    {
        get { return tables; }
        set { tables = value; }
    }



    // funcion que nos sirve para ver si una relacion existe ya....
    public bool existsRelation(string parentTable, string childTable)
    {
        bool retorno = false;
        foreach (relation item in this.relations)
        {
            if (item.parentTable.Equals(parentTable) && item.childTable.Equals(childTable))
            {
                return true;
            }
               
        }
        return retorno;
    }
}
		
		
		
 
 
