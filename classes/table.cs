//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3603
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

// para arraylist
using System.Collections;

// para properties del propertyGrid
using System.ComponentModel;


[DefaultPropertyAttribute("name")]
public partial class table : IComparable
{


    #region["Variables"]


     
    private string name;
    private string targetName;
    private int numberOfFields;
    private string getKey;
    private string _fieldDescription;

    private Boolean _nameChanged;
    private Boolean _createdNew;
    private Boolean _deleted;


  
    // This attribute enables the ArrayList to be serialized:
    [System.Xml.Serialization.XmlArray("Fields")]
    // Explicitly tell the serializer to expect the Item class
    // so it can be properly written to XML from the collection:
    [System.Xml.Serialization.XmlArrayItem("Field", typeof(field))]
    public ArrayList fields = new ArrayList();


    // This attribute enables the ArrayList to be serialized:
    [System.Xml.Serialization.XmlArray("keyFields")]
    // Explicitly tell the serializer to expect the Item class
    // so it can be properly written to XML from the collection:
    [System.Xml.Serialization.XmlArrayItem("keyFields", typeof(field))]
    public ArrayList keyFields = new ArrayList();

    // This attribute enables the ArrayList to be serialized:
    [System.Xml.Serialization.XmlArray("notKeyFields")]
    // Explicitly tell the serializer to expect the Item class
    // so it can be properly written to XML from the collection:
    [System.Xml.Serialization.XmlArrayItem("notKeyFields", typeof(field))]
    public ArrayList notKeyFields = new ArrayList();

    // This attribute enables the ArrayList to be serialized:
    [System.Xml.Serialization.XmlArray("Relations")]
    // Explicitly tell the serializer to expect the Item class
    // so it can be properly written to XML from the collection:
    [System.Xml.Serialization.XmlArrayItem("Relation", typeof(relation))]
    public ArrayList relations = new ArrayList();
    


    #endregion


    #region["Propiedades"]

        
    //public String getName() { return _name; }

    public String Name
    {
        get { return name; }
        set { name = value; }
    }
    public String TargetName
    {
        get { return targetName; }
        set { targetName = value; }
    }
    public int NumberOfFields
    {
        get { return numberOfFields; }
        set { numberOfFields = value; }
    }

    public String GetKey
    {
        get { return getKey; }
        set { getKey = value; }
    }
    
    public String fieldDescription
    {
        get { return _fieldDescription; }
        set { _fieldDescription = value; }
    }

    public int countOfFields
    {
        get { return getFields.Count; }
    }

    public int countOfFieldsNotKey
    {
        get { return getFields.Count - getNotKeyFields.Count; }
    }

    // return a string with delimiter...
    public String getListOfFields(string delimiter)
    {
        ArrayList al = new ArrayList();
        foreach (field item in fields)
        {
            al.Add(item.Name);
        }
        string[] returnArray;
        string retorno = "";

        returnArray = (string[])al.ToArray(Type.GetType("System.String"));

        if (returnArray.Length == 1)
        {
            retorno = returnArray[0];
        }
        else
        {
            retorno = string.Join(delimiter, returnArray);
           // retorno = retorno.Remove(retorno.LastIndexOf(delimiter), delimiter.Length);
        }

        return retorno;
    }

    // return a string with delimiter... without key fields
    public String getListOfFieldsWithoutKeys(string delimiter)
    {
        ArrayList al = new ArrayList();
        foreach (field item in fields)
        {
            if (!item.isKey)
                al.Add(item.Name);
        }
        string[] returnArray;
        string retorno = "";

        returnArray = (string[])al.ToArray(Type.GetType("System.String"));

        if (returnArray.Length == 1)
        {
            retorno = returnArray[0];
        }
        else
        {
            retorno = string.Join(delimiter, returnArray);
            //retorno = retorno.Remove(retorno.LastIndexOf(delimiter), delimiter.Length);
        }

        return retorno;
    }

    // return a string with delimiter... fields key
    public String getListOfKeyFields(string delimiter)
    {
        ArrayList al = new ArrayList();
        foreach (field item in fields)
        {
            if (item.isKey)
                al.Add(item.Name);
        }
        string[] returnArray;
        string retorno = "";

        returnArray= (string[])al.ToArray(Type.GetType("System.String"));

        if (returnArray.Length == 1)
        {
            retorno = returnArray[0] ;
        }
        else
        {
            retorno = string.Join(delimiter, returnArray);
            //retorno = retorno.Remove(retorno.LastIndexOf(delimiter), delimiter.Length);
        }
        
        return retorno;
    }

    // return a string of parametes (int idCars, ..) with delimiter... fields key
    public String getListOfParameters(string delimiter)
    {
        ArrayList al = new ArrayList();
        foreach (field item in fields)
        {
            if (item.isKey)
                switch (item.type)
                {
                    case field.fieldType._integer:
                        al.Add("int " + item.Name);
                        break;
                   
                   case field.fieldType._tinyInt:
                        al.Add("bool " + item.Name);
                        break;

                   case field.fieldType._boolean:
                        al.Add("bool " + item.Name);
                        break; 
                   
                    case field.fieldType._string:
                        al.Add("string " + item.Name);
                        break;                   
                   

                    default:
                        al.Add("string " + item.Name);
                        break;

                }               
        }
        string[] returnArray;
        string retorno = "";

        returnArray = (string[])al.ToArray(Type.GetType("System.String"));

        if (returnArray.Length == 1)
        {
            retorno = returnArray[0];
        }
        else
        {
            retorno = string.Join(delimiter, returnArray);
            // retorno = retorno.Remove(retorno.LastIndexOf(delimiter), delimiter.Length);
        }

        return retorno;
    }

    // return a string of parametes (int idCars, ..) with delimiter... fields key
    public String getListOfParametersForVb (string delimiter)
    {
        ArrayList al = new ArrayList();
        foreach (field item in fields)
        {
            if (item.isKey)
                switch (item.type)
                {
                    case field.fieldType._integer:
                        al.Add("int " + item.Name);
                        break;

                    case field.fieldType._tinyInt:
                        al.Add("bool " + item.Name);
                        break;

                    case field.fieldType._string:
                        al.Add("string " + item.Name);
                        break;


                    default:
                        al.Add("string " + item.Name);
                        break;

                }
        }
        string[] returnArray;
        string retorno = "";

        returnArray = (string[])al.ToArray(Type.GetType("System.String"));

        if (returnArray.Length == 1)
        {
            retorno = returnArray[0];
        }
        else
        {
            retorno = string.Join(delimiter, returnArray);
            // retorno = retorno.Remove(retorno.LastIndexOf(delimiter), delimiter.Length);
        }

        return retorno;
    }


    // return a string of parametes (int idCars, ..) with delimiter... fields key
    public String getListOfParametersForPhp(string delimiter)
    {
        ArrayList al = new ArrayList();
        foreach (field item in fields)
        {
            if (item.isKey)
                switch (item.type)
                {
                    case field.fieldType._integer:
                        al.Add("int " + item.Name);
                        break;

                    case field.fieldType._tinyInt:
                        al.Add("bool " + item.Name);
                        break;

                    case field.fieldType._string:
                        al.Add("string " + item.Name);
                        break;


                    default:
                        al.Add("string " + item.Name);
                        break;

                }
        }
        string[] returnArray;
        string retorno = "";

        returnArray = (string[])al.ToArray(Type.GetType("System.String"));

        if (returnArray.Length == 1)
        {
            retorno = returnArray[0];
        }
        else
        {
            retorno = string.Join(delimiter, returnArray);
            // retorno = retorno.Remove(retorno.LastIndexOf(delimiter), delimiter.Length);
        }

        return retorno;
    }



    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList GetArrayOfFields
    {
        get { return fields; }
        set { fields = value; }
    }


    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList getFields
    {
        get { return fields; }
        set { fields = value; }
    }

    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList getKeyFields
    {
        get { return keyFields; }
        set { keyFields = value; }
    }

    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList getNotKeyFields
    {
        get { return notKeyFields; }
        set { notKeyFields = value; }
    }

    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList GetArrayOfRelations
    {
        get { return relations; }
        set { relations = value; }
    }




    // le decimos al serializer que lo ignore o nos duplica los campos...
    [System.Xml.Serialization.XmlIgnore]
    public ArrayList getRelations
    {
        get { return relations; }
        set { relations = value; }
    }


    // if we change the name of the table...
    public Boolean nameChanged
    {
        get { return _nameChanged; }
        set { _nameChanged = value; }
    }

    // if we create the table in the model editor
    public Boolean createdNew
    {
        get { return _createdNew; }
        set { _createdNew = value; }
    }


    // if we delete the table in the model editor
    public Boolean deleted
    {
        get { return _deleted; }
        set { _deleted = value; }
    }



    #endregion


    public table()
    {
        relations = new ArrayList();
        fields = new ArrayList();

    }

    // para poder ordenar...
    public int CompareTo(object obj)
    {
        table Compare = (table)obj;
        return string.Compare(this.name, Compare.name);

    }

    public override string ToString()
    {        
        return this.Name;
    }

}
 